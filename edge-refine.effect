uniform float4x4 ViewProj;
uniform texture2d image;

uniform int edge_shrink <
  string label = "Shrink Edges";
  string widget_type = "slider";
  int minimum = 0;
  int maximum = 20;
  int step = 1;
> = 5;

uniform int edge_sharpness <
  string label = "Shrink Sharpness";
  string widget_type = "slider";
  int minimum = 1;
  int maximum = 20;
  int step = 1;
> = 5;

uniform float2 uv_pixel_interval;

sampler_state textureSampler {
  Filter = Linear;
  AddressU = Clamp;
  AddressV = Clamp;
};

struct VertData {
  float4 pos : POSITION;
  float2 uv : TEXCOORD0;
};

VertData VSDefault(VertData v_in)
{
  VertData vert_out;
  vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
  vert_out.uv = v_in.uv;
  return vert_out;
}

float4 PSDespill(VertData v_in) : TARGET
  {
    float4 rgba = image.Sample(textureSampler, v_in.uv);

    // Edge Shrink and Sharpness
    if (edge_shrink > 0) {
      [loop] for (int x = -edge_shrink; x < edge_shrink; x++) {
        [loop] for (int y = -edge_shrink; y < edge_shrink; y++) {
          if (abs(x * x) + abs(y * y) < edge_shrink * edge_shrink) {
            float4 t = image.Sample(textureSampler, v_in.uv + float2(x * uv_pixel_interval.x, y * uv_pixel_interval.y));
            if (t.a < 1.0)
              rgba.a = max(rgba.a - (edge_sharpness * 0.005), 0);
          }
        }
      }
    }

    return rgba;
  }

  technique Draw
  {
    pass
      {
        vertex_shader = VSDefault(v_in);
        pixel_shader = PSDespill(v_in);
      }
  }
